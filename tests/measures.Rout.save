
R version 2.4.1 Patched (2007-03-31 r41272)
Copyright (C) 2007 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("arules")
Loading required package: stats4
Loading required package: Matrix
Loading required package: lattice
** fixing ngCMatrix validation
> 
> 
> data <- list(
+     c("A", "B"),
+     c("A", "B", "C", "G"),
+     c("C", "D"),
+     c("C", "D"),
+     c("E", "F")
+     )
> 
> trans <- as(data, "transactions")
> 
> 
> ##################################################################
> # Test the original example from
> # Edward R. Omiecinski. Alternative interest measures for mining 
> # associations in databases. IEEE Transactions on Knowledge and 
> # Data Engineering, 15(1):57-69, Jan/Feb 2003.
> 
> fsets <- eclat(trans, parameter = list(supp = 0))

parameter specification:
 tidLists support minlen maxlen            target   ext
    FALSE       0      1      5 frequent itemsets FALSE

algorithmic control:
 sparse sort verbose
      7   -2    TRUE

eclat - find frequent item sets with the eclat algorithm
version 2.6 (2004.08.16)         (c) 2002-2004   Christian Borgelt
create itemset ... 
set transactions ...[7 item(s), 5 transaction(s)] done [0.00s].
sorting and recoding items ... [7 item(s)] done [0.00s].
creating bit matrix ... [7 row(s), 5 column(s)] done [0.00s].
writing  ... [20 set(s)] done [0.00s].
Creating S4 object  ... done [0.01s].
> 
> quality(fsets) <- cbind(quality(fsets), 
+   allConfidence = interestMeasure(fsets, method = "allConfidence"))
> 
> inspect(fsets[order(size(fsets))])
   items support allConfidence
1  {C}       0.6     1.0000000
2  {B}       0.4     1.0000000
3  {A}       0.4     1.0000000
4  {G}       0.2     1.0000000
5  {D}       0.4     1.0000000
6  {E}       0.2     1.0000000
7  {F}       0.2     1.0000000
8  {E,                        
    F}       0.2     1.0000000
9  {C,                        
    D}       0.4     0.6666667
10 {C,                        
    G}       0.2     0.3333333
11 {B,                        
    G}       0.2     0.5000000
12 {A,                        
    G}       0.2     0.5000000
13 {A,                        
    C}       0.2     0.3333333
14 {A,                        
    B}       0.4     1.0000000
15 {B,                        
    C}       0.2     0.3333333
16 {A,                        
    C,                        
    G}       0.2     0.3333333
17 {A,                        
    B,                        
    G}       0.2     0.5000000
18 {B,                        
    C,                        
    G}       0.2     0.3333333
19 {A,                        
    B,                        
    C}       0.2     0.3333333
20 {A,                        
    B,                        
    C,                        
    G}       0.2     0.3333333
> 
> 
> ###################################################################
> # Test improvment
> # R. Bayardo, R. Agrawal, and D. Gunopulos. Constraint-based rule mining in
> # large, dense databases. Data Mining and Knowledge Discovery, 4(2/3):217-240,
> # 2000
> 
> rules <- apriori(trans, parameter=list(supp=0.01, conf = 0.5))

parameter specification:
 confidence minval smax arem  aval originalSupport support minlen maxlen target
        0.5    0.1    1 none FALSE            TRUE    0.01      1      5  rules
   ext
 FALSE

algorithmic control:
 filter tree heap memopt load sort verbose
    0.1 TRUE TRUE  FALSE TRUE    2    TRUE

apriori - find association rules with the apriori algorithm
version 4.21 (2004.05.09)        (c) 1996-2004   Christian Borgelt
set item appearances ...[0 item(s)] done [0.00s].
set transactions ...[7 item(s), 5 transaction(s)] done [0.00s].
sorting and recoding items ... [7 item(s)] done [0.00s].
creating transaction tree ... done [0.00s].
checking subsets of size 1 2 3 4 done [0.00s].
writing ... [30 rule(s)] done [0.00s].
creating S4 object  ... done [0.00s].
>  
> quality(rules) <- cbind(quality(rules),
+   improvement = interestMeasure(rules, method = "improvement"))
> 
> inspect(rules)
   lhs    rhs support confidence      lift improvement
1  {}  => {C}     0.6  0.6000000 1.0000000         Inf
2  {E} => {F}     0.2  1.0000000 5.0000000         Inf
3  {F} => {E}     0.2  1.0000000 5.0000000         Inf
4  {G} => {B}     0.2  1.0000000 2.5000000         Inf
5  {B} => {G}     0.2  0.5000000 2.5000000         Inf
6  {G} => {A}     0.2  1.0000000 2.5000000         Inf
7  {A} => {G}     0.2  0.5000000 2.5000000         Inf
8  {G} => {C}     0.2  1.0000000 1.6666667         0.4
9  {D} => {C}     0.4  1.0000000 1.6666667         0.4
10 {C} => {D}     0.4  0.6666667 1.6666667         Inf
11 {B} => {A}     0.4  1.0000000 2.5000000         Inf
12 {A} => {B}     0.4  1.0000000 2.5000000         Inf
13 {B} => {C}     0.2  0.5000000 0.8333333        -0.1
14 {A} => {C}     0.2  0.5000000 0.8333333        -0.1
15 {B,                                                
    G} => {A}     0.2  1.0000000 2.5000000         0.0
16 {A,                                                
    G} => {B}     0.2  1.0000000 2.5000000         0.0
17 {A,                                                
    B} => {G}     0.2  0.5000000 2.5000000         0.0
18 {B,                                                
    G} => {C}     0.2  1.0000000 1.6666667         0.0
19 {C,                                                
    G} => {B}     0.2  1.0000000 2.5000000         0.0
20 {B,                                                
    C} => {G}     0.2  1.0000000 5.0000000         0.5
21 {A,                                                
    G} => {C}     0.2  1.0000000 1.6666667         0.0
22 {C,                                                
    G} => {A}     0.2  1.0000000 2.5000000         0.0
23 {A,                                                
    C} => {G}     0.2  1.0000000 5.0000000         0.5
24 {A,                                                
    B} => {C}     0.2  0.5000000 0.8333333        -0.1
25 {B,                                                
    C} => {A}     0.2  1.0000000 2.5000000         0.0
26 {A,                                                
    C} => {B}     0.2  1.0000000 2.5000000         0.0
27 {A,                                                
    B,                                                
    G} => {C}     0.2  1.0000000 1.6666667         0.0
28 {B,                                                
    C,                                                
    G} => {A}     0.2  1.0000000 2.5000000         0.0
29 {A,                                                
    C,                                                
    G} => {B}     0.2  1.0000000 2.5000000         0.0
30 {A,                                                
    B,                                                
    C} => {G}     0.2  1.0000000 5.0000000         0.0
>     
> 
